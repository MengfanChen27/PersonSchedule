name: Build Windows Executable

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install pulp matplotlib pandas numpy
        
    - name: Download CBC Solver
      run: |
        # Create solver directory if it doesn't exist
        if (-not (Test-Path "solver")) {
            New-Item -ItemType Directory -Path "solver" -Force
        } else {
            Write-Host "Solver directory already exists"
        }
        
        # Download CBC solver directly from COIN-OR releases
        try {
            Write-Host "Downloading CBC solver..."
            Invoke-WebRequest -Uri "https://raw.githubusercontent.com/coin-or/pulp/master/pulp/solverdir/cbc/win/64/cbc.exe" -OutFile "solver/cbc.exe"
            if (Test-Path "solver/cbc.exe") {
                Write-Host "CBC solver downloaded successfully"
            } else {
                throw "CBC solver file not found after download"
            }
        } catch {
            Write-Error "Failed to download CBC solver: $_"
            exit 1
        }
        
    - name: Create PyInstaller spec file
      run: |
        @"
        # -*- mode: python ; coding: utf-8 -*-

        block_cipher = None

        # Add CBC solver as a binary
        binaries = [
            ('solver/cbc.exe', 'solver')
        ]

        a = Analysis(
            ['PS_GUI3.py'],
            pathex=[],
            binaries=binaries,
            datas=[],
            hiddenimports=['pandas', 'numpy', 'pulp', 'matplotlib'],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='Production Scheduler',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=True,
            disable_windowed_traceback=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )
        "@ | Out-File -Encoding UTF8 Production_Scheduler.spec
        
    - name: Build with PyInstaller
      run: |
        pyinstaller Production_Scheduler.spec
        
    - name: Verify CBC solver in build
      run: |
        if (Test-Path "dist/Production Scheduler/solver/cbc.exe") {
            Write-Host "CBC solver found in build"
        } else {
            Write-Error "CBC solver not found in build"
            exit 1
        }
        
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Production Scheduler ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          Production Person Scheduler ${{ github.ref_name }}
          
          ### Features
          - Production scheduling optimization
          - Multiple machine support
          - Staff allocation
          - Shift planning
          
          ### Installation
          1. Download the executable
          2. Run it directly - no installation needed
          
          ### Changes
          - Fixed PuLP solver integration
          - Improved stability and performance
          - Added console window for troubleshooting
          - Direct CBC solver bundling
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/Production Scheduler.exe
        asset_name: Production_Scheduler.exe
        asset_content_type: application/octet-stream